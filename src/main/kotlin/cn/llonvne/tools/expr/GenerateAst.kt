package cn.llonvne.tools.expr

import java.io.File

/**
 * # 这是一个简单的 AST generator
 *
 * 该项目不在 kJlox 运行时运行，仅作为元编程，没有测试
 */
object GenerateAst {
    @JvmStatic
    fun main(args: Array<String>) {

        //--- 配置区域 ---//

        // 这是输出路径
        val outputDir = "/Users/llonvne/Desktop/College_Study_File/kJlox/src/main/kotlin/cn/llonvne/kJlox/expr/expr.kt"

        // 这是子类定义
        val nodes = listOf(
            "Binary   : Expr left, Token operator, Expr right",
            "Grouping : Expr expression",
            "Literal  : Any value",
            "Unary    : Token operator, Expr right"
        )

        // 以下的代码将会完成自动生成

        //--- 执行区域 ---//

        // 定义输出结果
        val output = StringBuilder("")

        // 定义包名，导入模块，定义 Expr 主接口 Visitor 访问接口，accept 函数
        output.append(
            """
            package cn.llonvne.kJlox.expr

            import cn.llonvne.kJlox.token.Token
            
            /**
            # This code is automatically generated by GenerateAst
            */


            interface Expr{
                fun <R> accept(visitor: Visitor<R>): R
                interface Visitor<R> {
                
        """.trimIndent()
        )

        // 定义子类的访问函数接口
        for (node in nodes) {
            val className = node.split(":")[0].trim();
            output.append("fun visit${className}Expr(expr: ${className}): R\n")
        }
        output.append("\n}\n")

        // 生成子类 并重载访问接口
        for (node in nodes) {
            val className = node.split(":")[0].trim();
            val fileds = node.split(":")[1].trim()
                .split(",").map { it.trim().split(" ") }
            output.append("class $className(")
            for ((type, name) in fileds) {
                output.append("val $name:$type,")
            }
            output.append(") : Expr\n{")
            output.append(
                """
                    override fun <R> accept(visitor: Visitor<R>): R {""" +
                        "return visitor.visit${className}Expr(this)"
                        + """}
            """.trimIndent()
            )
            output.append("}\n")
        }
        output.append("}")

        // 写入到文件
        File(outputDir).writeText(output.toString())
    }
}
